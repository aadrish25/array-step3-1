#brute-force-approach
for(int i=0;i<n;i++)
{
 sum=0;
 for(int j=i;j<n;j++)
 {
  sum=sum+a[j];
  if(sum==k) len=max(len,(j-i+1));
 }
}
return len;


#better-approach
int len=0;
maxlen=0;
map<long long,int> presummap;
long long sum=0;
long long rem;
for(int i=0;i<n;i++)
{
 sum = sum + a[i];
 if(sum==k)
 { 
   maxlen=max(len,i+1);
 }
 rem = sum-k;
 if(presummap.find(rem)!=presummap.end())
 {
   len=i-presummap[rem];
   maxlen=max(maxlen,len);
  }
presummap[sum]=i;
}
return maxlen;



#optimal-approach
int i=0;
int j=0;
int len=0, maxlen=0;
while(i<n)
{
 if(sum==k)
 {
  len=i-j+1;
  maxlen=max(len,maxlen);
  }
 while((sum>k) && (j<=i))
 {
   sum=sum-a[j];
   j++;
 }
 sum=sum+a[i];
 i++;
}
return maxlen;
  
 
